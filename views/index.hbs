<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>L·∫•y m√£ ƒëƒÉng nh·∫≠p</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f9fafb;
      font-family: Arial, sans-serif;
    }

    .container {
      max-width: 450px;
      margin: 40px auto;
    }

    .card {
      border-radius: 12px;
      box-shadow: 0 1px 4px rgba(0,0,0,0.1);
      padding: 24px;
    }

    .form-select {
      background-position: right 1rem center;
      padding-right: 2.5rem;
    }

    .btn-custom {
      background-color: rgb(59, 130, 246);
      color: white;
      font-weight: 500;
    }

    .btn-custom:hover {
      background-color: rgb(37, 99, 235);
    }

    .error-message {
      color: red;
      font-size: 14px;
      margin-top: 4px;
    }

    #codeResult {
      display: none;
      text-align: center;
      font-weight: bold;
      font-size: 18px;
      color: #0d6efd;
      margin-top: 20px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="container">
    <h3 class="text-center mb-4 fw-bold">L·∫•y m√£ ƒëƒÉng nh·∫≠p</h3>
    <div class="card">
      <div class="card-body">
        <div class="card-title fw-bold">Th√¥ng tin t√†i kho·∫£n</div>
        <div class="card-subtitle text-muted mb-3">Nh·∫≠p th√¥ng tin ƒë·ªÉ l·∫•y m√£ ƒëƒÉng nh·∫≠p</div>

        <form id="loginForm">
          <div class="mb-3">
            <label for="service" class="form-label">Ch·ªçn d·ªãch v·ª•</label>
            <select id="service" class="form-select">
              <option value="">M·ªùi ch·ªçn d·ªãch v·ª•</option>
              <option value="netflix">Netflix</option>
              <option value="chatgpt">ChatGPT</option>
              <option value="spotify">Spotify</option>
            </select>
            <div id="serviceError" class="error-message d-none">Vui l√≤ng ch·ªçn d·ªãch v·ª•.</div>
          </div>

          <div class="mb-3">
            <label for="email" class="form-label">Email t√†i kho·∫£n</label>
            <input type="email" class="form-control" id="email" placeholder="Vui l√≤ng ch·ªçn d·ªãch v·ª• tr∆∞·ªõc">
            <div id="emailError" class="error-message d-none">Vui l√≤ng nh·∫≠p email h·ª£p l·ªá.</div>
          </div>

          <button type="submit" class="btn btn-custom w-100">Nh·∫≠n Code</button>
        </form>

        <!-- Hi·ªÉn th·ªã m√£ k·∫øt qu·∫£ -->
        <div id="codeResult"></div>

      </div>
    </div>
  </div>

  <script>
    const form = document.getElementById("loginForm");
    const service = document.getElementById("service");
    const email = document.getElementById("email");
    const serviceError = document.getElementById("serviceError");
    const emailError = document.getElementById("emailError");
    const codeResult = document.getElementById("codeResult");

    form.addEventListener("submit", function (e) {
      e.preventDefault();
      let valid = true;

      // Reset l·ªói v√† k·∫øt qu·∫£
      serviceError.classList.add("d-none");
      emailError.classList.add("d-none");
      codeResult.style.display = "none";
      codeResult.textContent = "";
      codeResult.style.cursor = "default";

      // Validate d·ªãch v·ª•
      if (!service.value) {
        serviceError.classList.remove("d-none");
        valid = false;
      }

      // Validate email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!email.value || !emailRegex.test(email.value)) {
        emailError.classList.remove("d-none");
        valid = false;
      }

      if (valid) {
        // Hi·ªÉn th·ªã ƒëang x·ª≠ l√Ω
        codeResult.textContent = "‚è≥ ƒêang x·ª≠ l√Ω...";
        codeResult.style.display = "block";

        // G·ª≠i y√™u c·∫ßu t·ªõi API
        fetch('/api/get-code', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: email.value,
            service: service.value
          }),
        })
        .then(response => response.json())
        .then(data => {
          // T·∫°o ƒë·ªô tr·ªÖ ng·∫´u nhi√™n 1-3 gi√¢y
          const delay = Math.floor(Math.random() * 2000) + 1000;
          setTimeout(() => {
            if (data.success && data.code) {
              const serviceName = service.options[service.selectedIndex].text;
              codeResult.textContent = `M√£ code ${serviceName}: ${data.code}`;
              codeResult.style.cursor = "pointer";

              // Cho ph√©p copy khi click
              codeResult.onclick = () => {
                navigator.clipboard.writeText(data.code).then(() => {
                  codeResult.textContent = `‚úÖ ƒê√£ copy m√£: ${data.code}`;
                  setTimeout(() => {
                    codeResult.textContent = `M√£ code ${serviceName}: ${data.code}`;
                  }, 2000);
                });
              };
            } else {
              codeResult.textContent = `Kh√¥ng t√¨m th·∫•y m√£ x√°c th·ª±c t·ª´ d·ªãch v·ª• ${service.value}`;
              codeResult.style.cursor = "default";
            }
          }, delay);
        })
        .catch(error => {
          console.error('L·ªói:', error);
          codeResult.textContent = "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi g·ª≠i y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.";
        });
      }
    });

    // Thay ƒë·ªïi placeholder email khi ch·ªçn d·ªãch v·ª•
    service.addEventListener("change", () => {
      email.placeholder = service.value ? "Nh·∫≠p email t√†i kho·∫£n..." : "Vui l√≤ng ch·ªçn d·ªãch v·ª• tr∆∞·ªõc";
    });
  </script>
  <script>
  // ===== 1. Ch·∫∑n c√°c ph√≠m t·∫Øt m·ªü DevTools =====
  document.addEventListener('keydown', function (e) {
    if (
      e.key === 'F12' ||
      (e.ctrlKey && e.shiftKey && ['I', 'J', 'C'].includes(e.key)) ||
      (e.ctrlKey && e.key === 'U')
    ) {
      e.preventDefault();
    }
  });

  // ===== 2. Ch·∫∑n chu·ªôt ph·∫£i =====
  document.addEventListener('contextmenu', function (e) {
    e.preventDefault();
  });

  // ===== 3. T·∫Øt ho√†n to√†n console =====
  (function () {
    const emptyFn = () => {};
    console.log = emptyFn;
    console.warn = emptyFn;
    console.error = emptyFn;
    console.info = emptyFn;
    console.debug = emptyFn;
    Object.freeze(console);
  })();

  // ===== 4. Ph√°t hi·ªán DevTools qua k√≠ch th∆∞·ªõc c·ª≠a s·ªï =====
  (function detectDevToolsResize() {
    let threshold = 160;
    setInterval(() => {
      if (
        window.outerWidth - window.innerWidth > threshold ||
        window.outerHeight - window.innerHeight > threshold
      ) {
        document.body.innerHTML = "<h2 style='text-align:center; margin-top:20%; color:red;'>üö´ Truy c·∫≠p DevTools b·ªã ch·∫∑n</h2>";
      }
    }, 1000);
  })();

  // ===== 5. K·ªπ thu·∫≠t ph√°t hi·ªán debugger (·∫©n d·ª•) =====
  (function detectDebuggerLoop() {
    const devtoolsDetector = () => {
      let start = performance.now();
      debugger; // N·∫øu b·∫≠t DevTools, s·∫Ω b·ªã ch·∫∑n ·ªü ƒë√¢y
      let end = performance.now();
      if (end - start > 100) {
        document.body.innerHTML = "<h2 style='text-align:center; margin-top:20%; color:red;'>üõë DevTools b·ªã ph√°t hi·ªán!</h2>";
      }
    };

    setInterval(devtoolsDetector, 1500);
  })();
</script>



</body>
</html>
